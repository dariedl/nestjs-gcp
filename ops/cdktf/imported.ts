import * as cdktf from "cdktf";

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
import * as random from "./.gen/providers/random";
new cdktf.GcsBackend(this, {
  bucket: "gcp-lab-terraform-state-01",
  prefix: "terraform/state",
});

/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: random.
For a more precise conversion please use the --provider flag in convert.*/
const networkName = "lab-tf-nw";
const projectId = "gcp-lab-project-stefan";
const googleArtifactRegistryRepositoryNestjsGcp =
  new google.ArtifactRegistryRepository(this, "nestjs-gcp", {
    description: "example docker repository",
    format: "DOCKER",
    location: "europe-west3",
    repositoryId: "nestjs-gcp",
  });
googleArtifactRegistryRepositoryNestjsGcp.addOverride("provider", "google");
const googleComputeNetworkGcpLabTerraformNetwork = new google.ComputeNetwork(
  this,
  "gcp-lab-terraform-network",
  {
    autoCreateSubnetworks: "true",
    name: networkName,
  }
);
googleComputeNetworkGcpLabTerraformNetwork.addOverride("provider", "google");
const googleProjectServiceVpcaccessApi = new google.ProjectService(
  this,
  "vpcaccess_api",
  {
    disableOnDestroy: false,
    service: "vpcaccess.googleapis.com",
  }
);
googleProjectServiceVpcaccessApi.addOverride("provider", "google");
const googleVpcAccessConnectorConnector = new google.VpcAccessConnector(
  this,
  "connector",
  {
    dependsOn: [`\${${googleProjectServiceVpcaccessApi.fqn}}`],
    ipCidrRange: "10.8.0.0/28",
    name: "lab-vpc-con",
    network: networkName,
  }
);
googleVpcAccessConnectorConnector.addOverride("provider", "google");
const randomStringRandom = new random.String(this, "random", {
  length: 16,
  overrideSpecial: "/@\xA3$",
  special: true,
});
const dataGoogleIamPolicyNoauth = new google.DataGoogleIamPolicy(
  this,
  "noauth",
  {
    binding: [
      {
        members: ["allUsers"],
        role: "roles/run.invoker",
      },
    ],
  }
);
new google.GoogleProvider(this, "google", {
  project: projectId,
  region: "europe-west3",
  zone: "europe-west3-a",
});
const googleComputeGlobalAddressPrivateIpAddress =
  new google.ComputeGlobalAddress(this, "private_ip_address", {
    addressType: "INTERNAL",
    name: "private-ip-address",
    network: googleComputeNetworkGcpLabTerraformNetwork.id,
    prefixLength: 16,
    purpose: "VPC_PEERING",
  });
googleComputeGlobalAddressPrivateIpAddress.addOverride("provider", "google");
const googleServiceNetworkingConnectionPrivateVpcConnection =
  new google.ServiceNetworkingConnection(this, "private_vpc_connection", {
    network: googleComputeNetworkGcpLabTerraformNetwork.id,
    reservedPeeringRanges: [googleComputeGlobalAddressPrivateIpAddress.name],
    service: "servicenetworking.googleapis.com",
  });
googleServiceNetworkingConnectionPrivateVpcConnection.addOverride(
  "provider",
  "google"
);
const googleSqlDatabaseInstanceMaster = new google.SqlDatabaseInstance(
  this,
  "master",
  {
    databaseVersion: "POSTGRES_11",
    deletionProtection: false,
    dependsOn: [
      `\${${googleServiceNetworkingConnectionPrivateVpcConnection.fqn}}`,
    ],
    name: "nestjs-instance",
    region: "europe-west3",
    settings: {
      ipConfiguration: {
        ipv4Enabled: false,
        privateNetwork: googleComputeNetworkGcpLabTerraformNetwork.id,
      },
      tier: "db-f1-micro",
    },
  }
);
googleSqlDatabaseInstanceMaster.addOverride("provider", "google");
const googleSqlUserUsers = new google.SqlUser(this, "users", {
  instance: googleSqlDatabaseInstanceMaster.name,
  name: "me",
  password: randomStringRandom.id,
});
googleSqlUserUsers.addOverride("provider", "google");
const googleCloudRunServiceGcrService = new google.CloudRunService(
  this,
  "gcr_service",
  {
    autogenerateRevisionName: true,
    dependsOn: [`\${${googleSqlUserUsers.fqn}}`],
    location: "europe-west3",
    name: "mygcrservice",
    template: {
      metadata: {
        annotations: [
          {
            autoscalingKnativeDevMaxScale: "1",
            runGoogleapisComVpcAccessConnector:
              googleVpcAccessConnectorConnector.name,
            runGoogleapisComVpcAccessEgress: "all",
          },
        ],
      },
      spec: {
        containers: [
          {
            env: [
              {
                name: "DATABASE_URL",
                value:
                  "postgresql://${google_sql_user.users.name}:${google_sql_user.users.password}@${google_sql_database_instance.master.private_ip_address}:5432/${google_sql_database_instance.master.name}",
              },
            ],
            image:
              "europe-west3-docker.pkg.dev/${local.project_id}/nestjs-gcp/nestjs-gcp-app:latest",
            resources: {
              limits: [
                {
                  cpu: "1000m",
                  memory: "512M",
                },
              ],
            },
          },
        ],
      },
    },
  }
);
googleCloudRunServiceGcrService.addOverride("provider", "google");
const googleCloudRunServiceIamPolicyNoauth =
  new google.CloudRunServiceIamPolicy(this, "noauth_12", {
    location: googleCloudRunServiceGcrService.location,
    policyData: dataGoogleIamPolicyNoauth.policyData,
    project: googleCloudRunServiceGcrService.project,
    service: googleCloudRunServiceGcrService.name,
  });

/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
googleCloudRunServiceIamPolicyNoauth.overrideLogicalId("noauth");
new cdktf.TerraformOutput(this, "url", {
  value: `\${${googleCloudRunServiceGcrService.status.fqn}[0].url}`,
});

